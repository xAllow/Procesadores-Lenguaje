
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\011" +
    "\000\002\003\006\000\002\014\002\000\002\015\002\000" +
    "\002\003\013\000\002\016\002\000\002\017\002\000\002" +
    "\003\012\000\002\020\002\000\002\021\002\000\002\003" +
    "\014\000\002\022\002\000\002\023\002\000\002\024\002" +
    "\000\002\003\020\000\002\010\002\000\002\007\002\000" +
    "\002\004\004\000\002\004\002\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\007" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\006\000\002\005" +
    "\010\000\002\005\004\000\002\005\003\000\002\005\002" +
    "\000\002\011\004\000\002\025\002\000\002\011\007\000" +
    "\002\011\006\000\002\026\002\000\002\011\011\000\002" +
    "\011\007\000\002\011\013\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\007\000\002\013\003" +
    "\000\002\027\002\000\002\013\006\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\030" +
    "\002\000\002\006\006\000\002\031\002\000\002\006\006" +
    "\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\052\004\011\006\015\007\006\010\025\011" +
    "\022\012\012\016\007\031\uffd5\032\004\033\uffd5\034\uffd5" +
    "\037\uffd5\041\014\042\005\043\026\044\021\045\016\046" +
    "\024\047\027\050\013\001\002\000\066\012\012\013\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\041\014\042\005\043\026\044" +
    "\021\045\016\046\024\047\027\050\013\001\002\000\054" +
    "\013\uffe1\014\173\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\170\037\uffe1\040\uffe1\042" +
    "\172\051\171\001\002\000\004\012\uffec\001\002\000\052" +
    "\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\016" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\037\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\001\002\000\014\031\031\032\032\033\034\034\033" +
    "\037\155\001\002\000\004\012\uffec\001\002\000\036\012" +
    "\012\013\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\041\014" +
    "\042\005\043\026\044\021\045\016\046\024\047\027\050" +
    "\013\001\002\000\066\012\012\013\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5" +
    "\040\uffd5\041\014\042\005\043\026\044\021\045\016\046" +
    "\024\047\027\050\013\001\002\000\044\013\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\040\uffe0\001\002\000\052\004\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\016\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\001\002\000\044" +
    "\013\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\037\uffde\040\uffde\001\002\000\056\002" +
    "\001\004\001\006\001\007\001\010\001\011\001\012\001" +
    "\016\001\017\001\031\001\032\001\033\001\034\001\037" +
    "\001\041\001\042\001\043\001\044\001\045\001\046\001" +
    "\047\001\050\001\001\002\000\044\013\uffd6\015\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037" +
    "\uffd6\040\uffd6\001\002\000\044\013\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\037\uffdd" +
    "\040\uffdd\001\002\000\004\012\113\001\002\000\054\002" +
    "\112\004\011\006\015\007\006\010\025\011\022\012\012" +
    "\016\007\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041" +
    "\014\042\005\043\026\044\021\045\016\046\024\047\027" +
    "\050\013\001\002\000\066\012\012\013\uffd5\015\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037" +
    "\uffd5\040\uffd5\041\014\042\005\043\026\044\021\045\016" +
    "\046\024\047\027\050\013\001\002\000\004\012\uffec\001" +
    "\002\000\044\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\037\uffdf\040\uffdf\001\002" +
    "\000\066\012\012\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\040\uffd5\041" +
    "\014\042\005\043\026\044\021\045\016\046\024\047\027" +
    "\050\013\001\002\000\044\013\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\037\uffdb\040" +
    "\uffdb\001\002\000\066\012\012\013\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5" +
    "\040\uffd5\041\014\042\005\043\026\044\021\045\016\046" +
    "\024\047\027\050\013\001\002\000\066\012\012\013\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\041\014\042\005\043\026\044" +
    "\021\045\016\046\024\047\027\050\013\001\002\000\066" +
    "\012\012\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5" +
    "\032\004\033\uffd5\034\uffd5\037\uffd5\040\uffd5\041\014\042" +
    "\005\043\026\044\021\045\016\046\024\047\027\050\013" +
    "\001\002\000\066\012\012\013\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\040" +
    "\uffd5\041\014\042\005\043\026\044\021\045\016\046\024" +
    "\047\027\050\013\001\002\000\044\013\uffe7\015\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037" +
    "\uffe7\040\uffe7\001\002\000\044\013\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\037\uffe6" +
    "\040\uffe6\001\002\000\044\013\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\031\uffe8\032\uffe8\033\034\034\033\037\uffe8\040" +
    "\uffe8\001\002\000\044\013\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\031\uffe9\032\uffe9\033\034\034\033\037\uffe9\040\uffe9" +
    "\001\002\000\004\012\042\001\002\000\036\012\012\031" +
    "\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014\042\005" +
    "\043\026\044\021\045\016\046\024\047\027\050\013\001" +
    "\002\000\014\031\031\032\032\033\034\034\033\037\ufff1" +
    "\001\002\000\004\037\045\001\002\000\052\012\051\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\030\046" +
    "\031\uffd5\032\004\033\uffd5\034\uffd5\041\014\042\005\043" +
    "\026\044\021\045\016\046\024\047\027\050\013\001\002" +
    "\000\052\012\051\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\030\046\031\uffd5\032\004\033\uffd5\034\uffd5" +
    "\041\014\042\005\043\026\044\021\045\016\046\024\047" +
    "\027\050\013\001\002\000\026\020\065\021\070\022\066" +
    "\023\071\024\064\025\067\031\031\032\032\033\034\034" +
    "\033\001\002\000\010\026\054\027\056\037\uffec\001\002" +
    "\000\054\012\051\013\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\030\046\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\041\014\042\005\043\026\044\021\045\016\046" +
    "\024\047\027\050\013\001\002\000\030\013\063\020\065" +
    "\021\070\022\066\023\071\024\064\025\067\031\031\032" +
    "\032\033\034\034\033\001\002\000\010\013\055\026\054" +
    "\027\056\001\002\000\052\012\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\001\002\000\012\013\uffba" +
    "\026\uffba\027\uffba\037\uffba\001\002\000\052\012\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002" +
    "\000\052\012\051\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\030\046\031\uffd5\032\004\033\uffd5\034\uffd5" +
    "\041\014\042\005\043\026\044\021\045\016\046\024\047" +
    "\027\050\013\001\002\000\012\013\uffbb\026\uffbb\027\uffbb" +
    "\037\uffbb\001\002\000\052\012\051\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\030\046\031\uffd5\032\004" +
    "\033\uffd5\034\uffd5\041\014\042\005\043\026\044\021\045" +
    "\016\046\024\047\027\050\013\001\002\000\012\013\uffbd" +
    "\026\uffbd\027\uffbd\037\uffbd\001\002\000\044\013\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\037\uffe4\040\uffe4\001\002\000\044\012\012\013\uffd5" +
    "\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037" +
    "\uffd5\041\014\042\005\043\026\044\021\045\016\046\024" +
    "\047\027\050\013\001\002\000\044\012\012\013\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5" +
    "\041\014\042\005\043\026\044\021\045\016\046\024\047" +
    "\027\050\013\001\002\000\044\012\012\013\uffd5\026\uffd5" +
    "\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041" +
    "\014\042\005\043\026\044\021\045\016\046\024\047\027" +
    "\050\013\001\002\000\044\012\012\013\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014" +
    "\042\005\043\026\044\021\045\016\046\024\047\027\050" +
    "\013\001\002\000\044\012\012\013\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014\042" +
    "\005\043\026\044\021\045\016\046\024\047\027\050\013" +
    "\001\002\000\044\012\012\013\uffd5\026\uffd5\027\uffd5\031" +
    "\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014\042\005" +
    "\043\026\044\021\045\016\046\024\047\027\050\013\001" +
    "\002\000\022\013\uffc3\026\uffc3\027\uffc3\031\031\032\032" +
    "\033\034\034\033\037\uffc3\001\002\000\022\013\uffc4\026" +
    "\uffc4\027\uffc4\031\031\032\032\033\034\034\033\037\uffc4" +
    "\001\002\000\022\013\uffc1\026\uffc1\027\uffc1\031\031\032" +
    "\032\033\034\034\033\037\uffc1\001\002\000\022\013\uffc2" +
    "\026\uffc2\027\uffc2\031\031\032\032\033\034\034\033\037" +
    "\uffc2\001\002\000\022\013\uffc5\026\uffc5\027\uffc5\031\031" +
    "\032\032\033\034\034\033\037\uffc5\001\002\000\022\013" +
    "\uffc0\026\uffc0\027\uffc0\031\031\032\032\033\034\034\033" +
    "\037\uffc0\001\002\000\004\037\ufff0\001\002\000\004\037" +
    "\102\001\002\000\036\012\012\013\uffd5\031\uffd5\032\004" +
    "\033\uffd5\034\uffd5\041\014\042\005\043\026\044\021\045" +
    "\016\046\024\047\027\050\013\001\002\000\014\013\uffef" +
    "\031\031\032\032\033\034\034\033\001\002\000\004\013" +
    "\105\001\002\000\052\004\011\006\015\007\006\010\025" +
    "\011\022\012\012\016\007\031\uffd5\032\004\033\uffd5\034" +
    "\uffd5\037\uffd5\041\014\042\005\043\026\044\021\045\016" +
    "\046\024\047\027\050\013\001\002\000\060\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\016\uffee\017\uffee\031\uffee\032\uffee\033\uffee\034\uffee\037" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\001\002\000\012\013\uffbf\026\uffbf\027" +
    "\uffbf\037\uffbf\001\002\000\044\013\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\037\uffdc" +
    "\040\uffdc\001\002\000\056\002\uffff\004\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\016\uffff\017\uffff\031\uffff" +
    "\032\uffff\033\uffff\034\uffff\037\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\001\002" +
    "\000\004\002\000\001\002\000\040\012\012\013\uffd5\016" +
    "\114\031\uffd5\032\004\033\uffd5\034\uffd5\041\014\042\005" +
    "\043\026\044\021\045\016\046\024\047\027\050\013\001" +
    "\002\000\040\012\012\017\uffd5\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\040\uffd5\041\014\042\005\043\026\044\021\045" +
    "\016\046\024\047\027\050\013\001\002\000\014\013\116" +
    "\031\031\032\032\033\034\034\033\001\002\000\004\037" +
    "\117\001\002\000\060\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\016\ufffd\017\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\037\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001" +
    "\002\000\016\017\uffc8\031\031\032\032\033\034\034\033" +
    "\040\uffc7\001\002\000\004\017\122\001\002\000\004\013" +
    "\123\001\002\000\004\037\124\001\002\000\060\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\016\ufffc\017\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\037\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\001\002\000\004\040\126\001\002" +
    "\000\040\012\012\017\uffd5\031\uffd5\032\004\033\uffd5\034" +
    "\uffd5\040\uffd5\041\014\042\005\043\026\044\021\045\016" +
    "\046\024\047\027\050\013\001\002\000\004\017\uffc6\001" +
    "\002\000\052\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\016\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\037" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\001\002\000\052\004\011\006\015\007" +
    "\006\010\025\011\022\012\012\016\007\031\uffd5\032\004" +
    "\033\uffd5\034\uffd5\037\uffd5\041\014\042\005\043\026\044" +
    "\021\045\016\046\024\047\027\050\013\001\002\000\004" +
    "\007\133\001\002\000\004\012\134\001\002\000\052\012" +
    "\051\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\030\046\031\uffd5\032\004\033\uffd5\034\uffd5\041\014\042" +
    "\005\043\026\044\021\045\016\046\024\047\027\050\013" +
    "\001\002\000\010\013\ufff3\026\054\027\056\001\002\000" +
    "\004\013\137\001\002\000\004\037\140\001\002\000\060" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\016\ufff2\017\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\001\002\000\044\013\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\031\031\032\032\033\034" +
    "\034\033\037\uffda\040\uffda\001\002\000\014\013\063\031" +
    "\031\032\032\033\034\034\033\001\002\000\004\012\144" +
    "\001\002\000\052\012\051\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\030\046\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\041\014\042\005\043\026\044\021\045\016\046" +
    "\024\047\027\050\013\001\002\000\010\013\ufffa\026\054" +
    "\027\056\001\002\000\004\013\147\001\002\000\052\004" +
    "\011\006\015\007\006\010\025\011\022\012\012\016\007" +
    "\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014\042" +
    "\005\043\026\044\021\045\016\046\024\047\027\050\013" +
    "\001\002\000\060\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\037\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\001\002" +
    "\000\060\002\uffea\004\uffea\005\152\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\016\uffea\017\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\037\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\001\002\000\052" +
    "\004\011\006\015\007\006\010\025\011\022\012\012\016" +
    "\007\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014" +
    "\042\005\043\026\044\021\045\016\046\024\047\027\050" +
    "\013\001\002\000\060\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\016\ufff8\017\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\037\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\001" +
    "\002\000\060\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\016\uffeb\017\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\001\002\000" +
    "\060\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\016\ufffe\017\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\037\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\001\002\000\052\004" +
    "\011\006\015\007\006\010\025\011\022\012\012\016\007" +
    "\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5\041\014\042" +
    "\005\043\026\044\021\045\016\046\024\047\027\050\013" +
    "\001\002\000\054\004\011\006\015\007\006\010\025\011" +
    "\022\012\012\016\007\017\160\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\037\uffd5\041\014\042\005\043\026\044\021\045" +
    "\016\046\024\047\027\050\013\001\002\000\060\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\016\ufffb\017\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\037\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\001\002\000\004\012\ufff7\001\002" +
    "\000\004\012\163\001\002\000\052\012\051\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\030\046\031\uffd5" +
    "\032\004\033\uffd5\034\uffd5\041\014\042\005\043\026\044" +
    "\021\045\016\046\024\047\027\050\013\001\002\000\010" +
    "\013\ufff6\026\054\027\056\001\002\000\004\013\166\001" +
    "\002\000\052\004\011\006\015\007\006\010\025\011\022" +
    "\012\012\016\007\031\uffd5\032\004\033\uffd5\034\uffd5\037" +
    "\uffd5\041\014\042\005\043\026\044\021\045\016\046\024" +
    "\047\027\050\013\001\002\000\060\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\016\ufff5" +
    "\017\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\037\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\050\ufff5\001\002\000\070\012\012\013\uffd5\015\uffd5\016" +
    "\226\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034" +
    "\uffd5\037\uffd5\040\uffd5\041\014\042\005\043\026\044\021" +
    "\045\016\046\024\047\027\050\013\001\002\000\044\013" +
    "\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\037\uffd7\040\uffd7\001\002\000\050\013\uffd4" +
    "\014\202\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\201\037\uffd4\040\200\001\002\000" +
    "\036\012\012\015\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5" +
    "\041\014\042\005\043\026\044\021\045\016\046\024\047" +
    "\027\050\013\001\002\000\014\015\175\031\031\032\032" +
    "\033\034\034\033\001\002\000\046\013\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\176\037\uffd9\040\uffd9\001\002\000\066\012\012\013\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\041\014\042\005\043\026\044" +
    "\021\045\016\046\024\047\027\050\013\001\002\000\044" +
    "\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\031\032\032" +
    "\033\034\034\033\037\uffd8\040\uffd8\001\002\000\004\042" +
    "\uffd3\001\002\000\066\012\012\013\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037\uffd5" +
    "\040\uffd5\041\014\042\005\043\026\044\021\045\016\046" +
    "\024\047\027\050\013\001\002\000\004\041\203\001\002" +
    "\000\004\015\204\001\002\000\046\013\uffce\015\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\205\037\uffce\040\uffce\001\002\000\004\016\206\001\002" +
    "\000\040\012\012\017\uffd5\031\uffd5\032\004\033\uffd5\034" +
    "\uffd5\040\uffd5\041\014\042\005\043\026\044\021\045\016" +
    "\046\024\047\027\050\013\001\002\000\004\017\210\001" +
    "\002\000\044\013\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\037\uffcd\040\uffcd\001\002" +
    "\000\044\013\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\031" +
    "\032\032\033\034\034\033\037\uffd1\040\212\001\002\000" +
    "\004\042\uffd0\001\002\000\004\042\214\001\002\000\046" +
    "\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\217\037\uffcc\040\216\001\002\000" +
    "\044\013\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\037\uffcf\040\uffcf\001\002\000\004" +
    "\042\214\001\002\000\066\012\012\013\uffd5\015\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\031\uffd5\032\004\033\uffd5\034\uffd5\037" +
    "\uffd5\040\uffd5\041\014\042\005\043\026\044\021\045\016" +
    "\046\024\047\027\050\013\001\002\000\044\013\uffcb\015" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\031\031\032\032\033\034\034" +
    "\033\037\uffcb\040\221\001\002\000\004\042\214\001\002" +
    "\000\044\013\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\037\uffc9\040\uffc9\001\002\000" +
    "\044\013\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\037\uffca\040\uffca\001\002\000\004" +
    "\042\214\001\002\000\044\013\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\040" +
    "\uffd2\001\002\000\040\012\012\017\uffd5\031\uffd5\032\004" +
    "\033\uffd5\034\uffd5\040\uffd5\041\014\042\005\043\026\044" +
    "\021\045\016\046\024\047\027\050\013\001\002\000\044" +
    "\013\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\031\032\032" +
    "\033\034\034\033\037\uffe3\040\uffe3\001\002\000\004\017" +
    "\231\001\002\000\044\013\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\037\uffe2\040\uffe2" +
    "\001\002\000\044\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\037\uffe5\040\uffe5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\012\002\022\003\016\005\007\011\017\001" +
    "\001\000\006\005\231\011\017\001\001\000\002\001\001" +
    "\000\004\007\160\001\001\000\004\010\155\001\001\000" +
    "\002\001\001\000\004\007\142\001\001\000\006\005\141" +
    "\011\017\001\001\000\006\005\140\011\017\001\001\000" +
    "\002\001\001\000\004\007\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\110\005\007\011\017\001\001" +
    "\000\006\005\107\011\017\001\001\000\004\007\040\001" +
    "\001\000\002\001\001\000\006\005\027\011\017\001\001" +
    "\000\002\001\001\000\006\005\037\011\017\001\001\000" +
    "\006\005\036\011\017\001\001\000\006\005\035\011\017" +
    "\001\001\000\006\005\034\011\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\042\011\017\001\001\000" +
    "\004\022\043\001\001\000\002\001\001\000\010\005\046" +
    "\006\047\011\017\001\001\000\010\005\046\006\106\011" +
    "\017\001\001\000\002\001\001\000\004\007\077\001\001" +
    "\000\010\005\051\006\052\011\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\060\001\001\000\002" +
    "\001\001\000\004\031\056\001\001\000\010\005\046\006" +
    "\057\011\017\001\001\000\002\001\001\000\010\005\046" +
    "\006\061\011\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\076\011\017\001\001\000\006\005\075" +
    "\011\017\001\001\000\006\005\074\011\017\001\001\000" +
    "\006\005\073\011\017\001\001\000\006\005\072\011\017" +
    "\001\001\000\006\005\071\011\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\100\001" +
    "\001\000\002\001\001\000\006\005\102\011\017\001\001" +
    "\000\004\024\103\001\001\000\002\001\001\000\010\003" +
    "\105\005\007\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\114\011\017\001\001\000\010\005\117" +
    "\011\017\013\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\117\011\017\013\126" +
    "\001\001\000\002\001\001\000\004\020\130\001\001\000" +
    "\010\003\131\005\007\011\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\046\006\134\011\017\001" +
    "\001\000\004\021\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\046\006\144\011\017" +
    "\001\001\000\004\014\145\001\001\000\002\001\001\000" +
    "\010\003\147\005\007\011\017\001\001\000\004\015\150" +
    "\001\001\000\004\004\152\001\001\000\010\003\153\005" +
    "\007\011\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\156\003\016\005\007\011" +
    "\017\001\001\000\010\003\110\005\007\011\017\001\001" +
    "\000\002\001\001\000\004\016\161\001\001\000\002\001" +
    "\001\000\010\005\046\006\163\011\017\001\001\000\004" +
    "\017\164\001\001\000\002\001\001\000\010\003\166\005" +
    "\007\011\017\001\001\000\002\001\001\000\006\005\226" +
    "\011\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\173\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\176\011\017\001\001\000\002\001" +
    "\001\000\004\025\223\001\001\000\006\005\210\011\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\117\011\017\013\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\212\001\001\000\004\012\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\222\001" +
    "\001\000\006\005\217\011\017\001\001\000\002\001\001" +
    "\000\004\012\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\224\001\001\000\002\001\001\000\010" +
    "\005\117\011\017\013\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    /*private int var = 0;
    private int etq = 0;

    private String crearVariable() {
        return "$v" + (var++);
    }

    private String crearEtiq () {
        return "E" + (etq++);
    }*/

    TablaS tabla = new TablaS();

    private String tipoTemporaneo = "-1";

    // Referencias
    public void variable (String variable, String valor) {
         PLXC.out.println("\t" + variable + " = " + valor + ";");
    }

    // Declaracion variables
    public void declaracionEstandar (String type, String name) {
        switch (type) {
            case "int":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto oint = new Instancia(name,TInt.getInstancia(),TablaS.bloqueActual,true);     
                tabla.addObj(oint);
                break;
            case "float":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto ofloat = new Instancia(name,TFloat.getInstancia(),TablaS.bloqueActual,true);     
                tabla.addObj(ofloat);
                break;
            case "char":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto ochar = new Instancia(name,TChar.getInstancia(),TablaS.bloqueActual,true);    
                tabla.addObj(ochar);
                break;
            case "string":
                // realmente seria declaracionArray, pero para evitar incluir una nueva regla de la gramatica...
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto ostring = new Instancia(name,TArray.getInstancia(),TChar.getInstancia(),"0",TablaS.bloqueActual,true);
                tabla.addObj(ostring);
                break;
            default:
                break;
        }
        
    }

    public void declaracionConValor (String type, String name, Objeto value) {
        switch (type) {
            case "int":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto oint = new Instancia(name,TInt.getInstancia(),TablaS.bloqueActual,true);
                Vector<Objeto> pint = new Vector<>();
                pint.add(value);
                oint.metodos("asigna",pint); // ya se que devuelve un objeto pero no se a que asignarlo
                tabla.addObj(oint);
                break;
            case "float":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto ofloat = new Instancia(name,TFloat.getInstancia(),TablaS.bloqueActual,true);
                Vector<Objeto> pfloat = new Vector<>();
                pfloat.add(value);
                ofloat.metodos("asigna",pfloat); // ya se que devuelve un objeto pero no se a que asignarlo
                tabla.addObj(ofloat);
                break;
            case "char":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto ochar = new Instancia(name,TChar.getInstancia(),TablaS.bloqueActual,true);
                Vector<Objeto> pchar = new Vector<>();
                pchar.add(value);
                ochar.metodos("asigna",pchar); // ya se que devuelve un objeto pero no se a que asignarlo
                tabla.addObj(ochar);
                break;
            case "string":
                if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");
                Objeto ostring = new Instancia(name,TArray.getInstancia(),TChar.getInstancia(),"0",TablaS.bloqueActual,true,true,null); // el penultimo parametro es Instancia.getEsString() y el ultimo es Instancia.getVariableIndex()
                //PLXC.out.println(ostring.toString());
                Vector<Objeto> pstring = new Vector<>();
                pstring.add(value);
                ostring.metodos("asigna",pstring); // ya se que devuelve un objeto pero no se a que asignarlo
                tabla.addObj(ostring);
                break;
            default:
                break;
        }
    }

    public void declaracionArray (String type, String name, String size) {

        // int x[10];
        // float y[5];

        if (tabla.contiene(name,TablaS.bloqueActual)) printerror("variable ya declarada");

        switch (type) {
            case "int":
                // el constructor recibe 2 tipos porque es array y de un subtipo concreto...
                Objeto oArray = new Instancia(name,TArray.getInstancia(),TInt.getInstancia(),size,TablaS.bloqueActual,true);
                Objeto tamArray = new Instancia("$" + name + "_" + TablaS.bloqueActual + "_length",TInt.getInstancia(),TablaS.bloqueActual,false);
                PLXC.out.println("\t" + tamArray.getNombre() + " = " + size + ";");
                tabla.addObj(oArray);
                tabla.addObj(tamArray);
                break;
            case "float":
                // el constructor recibe 2 tipos porque es array y de un subtipo concreto...
                Objeto oArray2 = new Instancia(name,TArray.getInstancia(),TFloat.getInstancia(),size,TablaS.bloqueActual,true);
                Objeto tamArray2 = new Instancia("$" + name + "_" + TablaS.bloqueActual + "_length",TInt.getInstancia(),TablaS.bloqueActual,false);
                PLXC.out.println("\t" + tamArray2.getNombre() + " = " + size + ";");
                tabla.addObj(oArray2);
                tabla.addObj(tamArray2);
                break;
            case "char":
                // el constructor recibe 2 tipos porque es array y de un subtipo concreto...
                Objeto oArray3 = new Instancia(name,TArray.getInstancia(),TChar.getInstancia(),size,TablaS.bloqueActual,true);
                Objeto tamArray3 = new Instancia("$" + name + "_" + TablaS.bloqueActual + "_length",TInt.getInstancia(),TablaS.bloqueActual,false);
                PLXC.out.println("\t" + tamArray3.getNombre() + " = " + size + ";");
                tabla.addObj(oArray3);
                tabla.addObj(tamArray3);
                break;
            default:
                break;
        }
    }

    public void declaracionArrayConValor (String type, String n, String size, List<Objeto> sF) {

        // char st[3] = {'X',,'Y','Z'};

        declaracionArray(type,n,size);
        String auxiliar = Objeto.newNomObj();
        for (int i = 0; i < sF.size(); i++) {
            PLXC.out.println("\t" + auxiliar + "[" + i + "]=" + sF.get(i).getNombreBloque() + ";");
        }
        Objeto nuevoO = tabla.objeto(n);
        if (!(nuevoO instanceof Instancia)) printerror("variable no es una instancia");

        Objeto segundo = null;
        if (((Instancia) nuevoO).getSubtipo() == TInt.getInstancia()) {
            segundo = new Instancia(auxiliar,TArray.getInstancia(),TInt.getInstancia(),String.valueOf(sF.size()),TablaS.bloqueActual,true);
        } else if (((Instancia) nuevoO).getSubtipo() == TFloat.getInstancia()) {
            segundo = new Instancia(auxiliar,TArray.getInstancia(),TFloat.getInstancia(),String.valueOf(sF.size()),TablaS.bloqueActual,true);  
        } else if (((Instancia) nuevoO).getSubtipo() == TChar.getInstancia()) {
            segundo = new Instancia(auxiliar,TArray.getInstancia(),TChar.getInstancia(),String.valueOf(sF.size()),TablaS.bloqueActual,true);
        }
        Vector<Objeto> p = new Vector<>();
        p.add(segundo);

        nuevoO.metodos("asigna",p);
    }


    class ParEtiqueta {
        public String saltoTrue, saltoFalse;

        public ParEtiqueta (String t, String f) {
            saltoTrue = t;
            saltoFalse = f;
        }
    }

    public void printerror (String message) {
        PLXC.out.println("\terror ;");
        PLXC.out.println("\t# " + message);
    }

    public String obtenerValorASCII (String texto) {
        int valorASCII;

        if (texto.startsWith("'\\u") && texto.endsWith("'")) {
            // Si tiene formato unicode hexadecimal
            String codigoUnicodeHex = texto.substring(3, texto.length() - 1);
            valorASCII = Integer.parseInt(codigoUnicodeHex, 16); // Convertir a decimal
        } else if (texto.startsWith("'\\") && texto.endsWith("'") && texto.length() == 4) {
            // Si es un caracter especial
            valorASCII = texto.charAt(2); // Obtener el valor ASCII del caracter en la posición 2
        } else if (texto.startsWith("'") && texto.endsWith("'") && texto.length() == 3) {
            // Si es un simple caracter
            valorASCII = texto.charAt(1);
        } else {
            // Si el formato del CHARTEXT es erroneo
            throw new IllegalArgumentException("Formato no válido");
        }

        return String.valueOf(valorASCII);
    }

    public boolean esNumeroEntero (String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public String procesarSecuenciasDeEscape(String input) {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < input.length()) {
            char currentChar = input.charAt(i);
            if (currentChar == '\\' && i + 1 < input.length()) {
                char nextChar = input.charAt(i + 1);
                switch (nextChar) {
                    case 'n':
                        sb.append('\n');
                        break;
                    case 't':
                        sb.append('\t');
                        break;
                    case 'b':
                        sb.append('\b');
                        break;
                    case 'r':
                        sb.append('\r');
                        break;
                    case 'f':
                        sb.append('\f');
                        break;
                    case '\\':
                        sb.append('\\');
                        break;
                    case '\'':
                        sb.append('\'');
                        break;
                    case '\"':
                        sb.append('\"');
                        break;
                    case 'u':
                        if (i + 5 < input.length()) {
                            String unicode = input.substring(i + 2, i + 6);
                            try {
                                char parsedUnicode = (char) Integer.parseInt(unicode, 16);
                                sb.append(parsedUnicode);
                                i += 4; // Mover el índice 4 lugares adicionales
                            } catch (NumberFormatException e) {
                                sb.append("\\u").append(unicode); // Si hay un error, mantener la secuencia
                            }
                        } else {
                            sb.append("\\u"); // Si no hay suficientes caracteres, mantener la secuencia
                        }
                        break;
                    default:
                        sb.append("\\").append(nextChar); // Mantener la secuencia desconocida
                        break;
                }
                i++; // Incrementar el índice adicionalmente
            } else {
                sb.append(currentChar);
            }
            i++;
        }
        return sb.toString();
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista_de_sent ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_de_sent ::= lista_de_sent sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    if (!(e instanceof Instancia)) printerror("variable no es una instancia");
                    if (((Instancia) e).getTipo() == TChar.getInstancia()) {
                        PLXC.out.println("\tprintc " + e.getNombreBloque() + ";");
                    } else if (((Instancia) e).getTipo() == TArray.getInstancia() && ((Instancia) e).getEsString()) {
                        String lengthVariable = "$" + e.getNombreBloque() + "_length";
                        Objeto index4 = new Instancia(Objeto.newNomObj(), TInt.getInstancia(), TablaS.bloqueActual, true);
                        PLXC.out.println("\t" + index4.getNombreBloque() + "=0;");
                        String l6 = TablaS.newEtiq(), l7 = TablaS.newEtiq(), l8 = TablaS.newEtiq();
                        PLXC.out.println(l6 + ":");
                        PLXC.out.println("\tif (" + index4.getNombreBloque() + "<" + lengthVariable + ") goto " + l7 + ";");
                        PLXC.out.println("\tgoto " + l8 + ";");

                        PLXC.out.println(l7 + ":");
                        String auxAsig = Objeto.newNomObj();
                        PLXC.out.println("\t" + auxAsig + "=" + e.getNombreBloque() + "[" + index4.getNombreBloque() + "];");
                        PLXC.out.println("\twritec " + auxAsig + ";");
                        
                        PLXC.out.println("\t" + index4.getNombreBloque() + "=" + index4.getNombreBloque() + "+1;");
                        PLXC.out.println("\tgoto " + l6 + ";");
                        PLXC.out.println(l8 + ":" + "\n\twritec 10;");
                    } else if (((Instancia) e).getTipo() == TArray.getInstancia()) {
                        String auxiliar = Objeto.newNomObj();
                        int tamArray = Integer.parseInt(((Instancia) e).getTamArray());
                        String subTipo = (((Instancia) e).getSubtipo() == TChar.getInstancia()) ? "char" : "otro";
                        for (int i = 0; i < tamArray; i++) {
                            PLXC.out.println("\t" + auxiliar + "=" + e.getNombreBloque() + "[" + i + "];");
                            PLXC.out.println("\t" + ((subTipo.equals("char")) ? "printc " : "print ") + auxiliar + ";");
                        }
                    } else {
                        PLXC.out.println("\tprint " + e.getNombreBloque() + ";");
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= PRINT AP ALL secuenciaExpresiones CLL CP PYC 
            {
              Object RESULT =null;
		int sFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Objeto> sF = (List<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    String auxiliar = Objeto.newNomObj();
                    for (int i = 0; i < sF.size(); i++) {
                        PLXC.out.println("\t" + auxiliar + "[" + i + "]=" + sF.get(i).getNombreBloque() + ";");
                    }
                    String auxiliar2 = Objeto.newNomObj();
                    for (int i = 0; i < sF.size(); i++) {
                        PLXC.out.println("\t" + auxiliar2 + "=" + auxiliar + "[" + i + "];");
                        PLXC.out.println("\tprint " + auxiliar2 + ";");
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= ALL iBloque lista_de_sent CLL 
            {
              Object RESULT =null;
		int iBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer iB = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    tabla.borrarBloque(tabla.bloqueActual);
                    tabla.bloqueActual = iB.intValue();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(c.saltoTrue+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    PLXC.out.println("\tgoto " + eF + ";");
                    PLXC.out.println(c.saltoFalse + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= IF etiquetaFinal AP condicion NT$0 CP sentencia NT$1 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLXC.out.println(eF + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(eF + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                    PLXC.out.println(c.saltoTrue + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= WHILE etiquetaFinal NT$2 AP condicion NT$3 CP sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    PLXC.out.println("\tgoto " + eF + ";");
                    PLXC.out.println(c.saltoFalse + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(eF + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println(c.saltoTrue + ":");
                    PLXC.out.println("\tgoto " + eF + ";");
                    PLXC.out.println(c.saltoFalse + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= DO etiquetaFinal NT$4 sentencia WHILE AP condicion NT$5 CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String eF = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              Object RESULT =null;
		int eF1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eF1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String eF1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 PLXC.out.println(eF1 + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eF1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eF1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String eF1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eF2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eF2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eF2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(eF2 + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eF1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eF1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String eF1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eF2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eF2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String eF2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
                    PLXC.out.println("\tgoto " + eF1 + ";"); 
                    PLXC.out.println(c.saltoTrue+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= FOR etiquetaFinal AP expresion NT$6 PYC condicion etiquetaFinal NT$7 PYC expresion NT$8 CP sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eF1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eF1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String eF1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eF2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eF2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String eF2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    PLXC.out.println("\tgoto " + eF2 + ";");
                    PLXC.out.println(c.saltoFalse+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iBloque ::= 
            {
              Integer RESULT =null;
		 RESULT = Integer.valueOf(TablaS.newBloque()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iBloque",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiquetaFinal ::= 
            {
              String RESULT =null;
		 RESULT = TablaS.newEtiq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaFinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // else_if ::= ELSE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // else_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion MAS expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e2);
                    RESULT = e1.metodos("suma",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion MENOS expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e2);
                    RESULT = e1.metodos("resta",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion POR expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e2);
                    RESULT = e1.metodos("multiplicacion",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion DIV expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e2);
                    RESULT = e1.metodos("division",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= MENOS expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e);
                    Objeto auxiliar = new Instancia("0",TInt.getInstancia(),TablaS.bloqueActual,false);
                    RESULT = auxiliar.metodos("resta",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= AP expresion CP 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= IDENT IGUAL expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (!tabla.contiene(i)) printerror("variable no declarada");
                    Objeto o = tabla.objeto(i);
                    if (!(o instanceof Instancia)) printerror("variable no es una instancia");
                    Vector<Objeto> p = new Vector<>();
                    p.add(e);
                    RESULT = o.metodos("asigna",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= IDENT IGUAL ALL secuenciaExpresiones CLL 
            {
              Objeto RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Objeto> sF = (List<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if (!tabla.contiene(name)) printerror("variable no declarada");
                    String auxiliar = Objeto.newNomObj();
                    for (int i = 0; i < sF.size(); i++) {
                        PLXC.out.println("\t" + auxiliar + "[" + i + "]=" + sF.get(i).getNombreBloque() + ";");
                    }
                    Objeto nuevoO = tabla.objeto(name);
                    if (!(nuevoO instanceof Instancia)) printerror("variable no es una instancia");
                    
                    Objeto segundo = null;
                    if (((Instancia) nuevoO).getSubtipo() == TInt.getInstancia()) {
                        segundo = new Instancia(auxiliar,TArray.getInstancia(),TInt.getInstancia(),String.valueOf(sF.size()),TablaS.bloqueActual,true);
                    } else if (((Instancia) nuevoO).getSubtipo() == TFloat.getInstancia()) {
                        segundo = new Instancia(auxiliar,TArray.getInstancia(),TFloat.getInstancia(),String.valueOf(sF.size()),TablaS.bloqueActual,true);  
                    } else if (((Instancia) nuevoO).getSubtipo() == TChar.getInstancia()) {
                        segundo = new Instancia(auxiliar,TArray.getInstancia(),TChar.getInstancia(),String.valueOf(sF.size()),TablaS.bloqueActual,true);
                    }
                    Vector<Objeto> p = new Vector<>();
                    p.add(segundo);

                    RESULT = nuevoO.metodos("asigna",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= IDENT 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (!tabla.contiene(i)) printerror("variable no declarada");
                    Objeto o = tabla.objeto(i);
                    if (!(o instanceof Instancia)) printerror("variable no es una instancia");
                    RESULT = o;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= NUM 
            {
              Objeto RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia(n,TInt.getInstancia(),TablaS.bloqueActual,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= REAL 
            {
              Objeto RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia(r,TFloat.getInstancia(),TablaS.bloqueActual,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= CHARTEXT 
            {
              Objeto RESULT =null;
		int cTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cT = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia(obtenerValorASCII(cT),TChar.getInstancia(),TablaS.bloqueActual,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= STRINGTEXT 
            {
              Objeto RESULT =null;
		int sTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sT = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String cadenaAux = sT.substring(1,sT.length()-1);
                    String cadena = procesarSecuenciasDeEscape(cadenaAux);
                    String aux = Objeto.newNomObj();
                    for (int i = 0; i < cadena.length(); i++) {
                        char caracter = cadena.charAt(i);
                        int valorAscii = (int) caracter;
                        PLXC.out.println("\t" + aux + "[" + i + "]=" + valorAscii + ";");
                    }
                    Objeto length = new Instancia("$" + aux + "_length", TInt.getInstancia(), TablaS.bloqueActual, false);
                    PLXC.out.println("\t" + length.getNombre() + "=" + cadena.length() + ";");
                
                    Objeto index = new Instancia(Objeto.newNomObj(), TInt.getInstancia(), TablaS.bloqueActual, true);
                    PLXC.out.println("\t" + index.getNombreBloque() + "=0;");
                    RESULT = new Instancia(aux,TArray.getInstancia(),TChar.getInstancia(),String.valueOf(sT.length() - 2),TablaS.bloqueActual,false,true,index);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= CASTINGINT expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e);
                    RESULT = e.metodos("castingAInt",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= CASTINGFLOAT expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    Vector<Objeto> p = new Vector<>();
                    p.add(e);
                    RESULT = e.metodos("castingAFloat",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= CASTINGCHAR expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Vector<Objeto> p = new Vector<>();
                    p.add(e);
                    RESULT = e.metodos("castingAChar",p);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= IDENT AC expresion CC 
            {
              Objeto RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto index = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if (!tabla.contiene(name)) printerror("variable (array) no declarada");
                    Objeto found = tabla.objeto(name);
                    Vector<Objeto> vAux = new Vector<>();
                    vAux.add(index);

                    Objeto salida = found.metodos("accederA",vAux);
                    tabla.addObj(salida);
                    RESULT = salida;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= IDENT AC expresion CC IGUAL expresion 
            {
              Objeto RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto index = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto value = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (!tabla.contiene(name)) printerror("variable no declarada");
                    Objeto o = tabla.objeto(name);
                    if (!(o instanceof Instancia)) printerror("variable no es una instancia");
                    
                    Vector<Objeto> vAux = new Vector<>();
                    vAux.add(value);
                    vAux.add(index);

                    Objeto salida = o.metodos("asignaValorPos",vAux);
                    tabla.addObj(salida);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= IDENT LENGTH 
            {
              Objeto RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if (!tabla.contiene(name)) printerror("variable no declarada");
                    Objeto objAr = tabla.objeto(name); 
                    if (!(objAr instanceof Instancia)) printerror("variable no es una instancia");
                    RESULT = tabla.objeto("$" + name + "_" + objAr.getBloque() + "_length");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= declaracionVars 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionVars ::= IDENT IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            declaracionEstandar(type,n);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                            tipoTemporaneo = type;
                            declaracionEstandar(type,n);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionVars ::= IDENT IDENT COMA NT$9 restoVars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracionVars ::= IDENT IDENT IGUAL expresion 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            declaracionConValor(type,n,e);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                            tipoTemporaneo = type;
                            declaracionConValor(type,n,e);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracionVars ::= IDENT IDENT IGUAL expresion COMA NT$10 restoVars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracionVars ::= IDENT IDENT AC NUM CC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            declaracionArray(type,n,size);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracionVars ::= IDENT IDENT AC NUM CC IGUAL ALL secuenciaExpresiones CLL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Objeto> sF = (List<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            declaracionArrayConValor(type,n,size,sF);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // restoVars ::= IDENT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    declaracionEstandar(tipoTemporaneo,n);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restoVars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // restoVars ::= IDENT IGUAL expresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    declaracionConValor(tipoTemporaneo,n,e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restoVars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // restoVars ::= IDENT COMA restoVars 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    declaracionEstandar(tipoTemporaneo,n);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restoVars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // restoVars ::= IDENT IGUAL expresion COMA restoVars 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    declaracionConValor(tipoTemporaneo,n,e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restoVars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // secuenciaExpresiones ::= expresion 
            {
              List<Objeto> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto r = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciaExpresiones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              List<Objeto> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto r = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new ArrayList<>(); RESULT.add(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // secuenciaExpresiones ::= expresion NT$11 COMA secuenciaExpresiones 
            {
              List<Objeto> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (List<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto r = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Objeto> sF = (List<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.addAll(sF); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciaExpresiones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= expresion EQ expresion 
            {
              ParEtiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // SEGURAMENTE TENGO QUE HACER AJUSTES DE GETNOMBREBLOQUE() PARA CUANDO MUESTRE LOS $
                    ParEtiqueta pet = new ParEtiqueta(TablaS.newEtiq(),TablaS.newEtiq());
                    PLXC.out.println("\tif (" + e1.getNombreBloque() + "==" + e2.getNombreBloque() + ") goto " + pet.saltoTrue + ";");
                    PLXC.out.println("\tgoto " + pet.saltoFalse + ";");
                    RESULT = pet;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= expresion NE expresion 
            {
              ParEtiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    ParEtiqueta pet = new ParEtiqueta(TablaS.newEtiq(),TablaS.newEtiq());
                    PLXC.out.println("\tif (" + e1.getNombreBloque() + "==" + e2.getNombreBloque() + ") goto " + pet.saltoFalse + ";");
                    PLXC.out.println("\tgoto " + pet.saltoTrue + ";");
                    RESULT = pet;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= expresion LT expresion 
            {
              ParEtiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    ParEtiqueta pet = new ParEtiqueta(TablaS.newEtiq(),TablaS.newEtiq());
                    PLXC.out.println("\tif (" + e1.getNombreBloque() + "<" + e2.getNombreBloque() + ") goto " + pet.saltoTrue + ";");
                    PLXC.out.println("\tgoto " + pet.saltoFalse + ";");
                    RESULT = pet;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion ::= expresion LE expresion 
            {
              ParEtiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ParEtiqueta pet = new ParEtiqueta(TablaS.newEtiq(),TablaS.newEtiq());
                    PLXC.out.println("\tif (" + e2.getNombreBloque() + "<" + e1.getNombreBloque() + ") goto " + pet.saltoFalse + ";");
                    PLXC.out.println("\tgoto " + pet.saltoTrue + ";");
                    RESULT = pet;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicion ::= expresion GT expresion 
            {
              ParEtiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    ParEtiqueta pet = new ParEtiqueta(TablaS.newEtiq(),TablaS.newEtiq());
                    PLXC.out.println("\tif (" + e2.getNombreBloque() + "<" + e1.getNombreBloque() + ") goto " + pet.saltoTrue + ";");
                    PLXC.out.println("\tgoto " + pet.saltoFalse + ";");
                    RESULT = pet;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicion ::= expresion GE expresion 
            {
              ParEtiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ParEtiqueta pet = new ParEtiqueta(TablaS.newEtiq(),TablaS.newEtiq());
                    PLXC.out.println("\tif (" + e1.getNombreBloque() + "<" + e2.getNombreBloque() + ") goto " + pet.saltoFalse + ";");
                    PLXC.out.println("\tgoto " + pet.saltoTrue + ";");
                    RESULT = pet;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion ::= NO condicion 
            {
              ParEtiqueta RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ParEtiqueta(c.saltoFalse,c.saltoTrue);
                    // se intercambian
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$12 ::= 
            {
              ParEtiqueta RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiqueta c1 = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.saltoTrue+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion ::= condicion AND NT$12 condicion 
            {
              ParEtiqueta RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ParEtiqueta) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiqueta c1 = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiqueta c2 = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    PLXC.out.println(c1.saltoFalse+":");
                    PLXC.out.println("\tgoto " + c2.saltoFalse + ";");
                    RESULT = new ParEtiqueta(c2.saltoTrue,c2.saltoFalse);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$13 ::= 
            {
              ParEtiqueta RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiqueta c1 = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.saltoFalse+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion ::= condicion OR NT$13 condicion 
            {
              ParEtiqueta RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ParEtiqueta) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEtiqueta c1 = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEtiqueta c2 = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    PLXC.out.println(c1.saltoTrue + ":");
                    PLXC.out.println("\tgoto " + c2.saltoTrue + ";");
                    RESULT = new ParEtiqueta(c2.saltoTrue,c2.saltoFalse);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion ::= AP condicion CP 
            {
              ParEtiqueta RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEtiqueta c = (ParEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = c; // quizas es mejor un .clone()
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
