
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\015\002\000\002\016\002" +
    "\000\002\003\013\000\002\017\002\000\002\020\002\000" +
    "\002\003\012\000\002\021\002\000\002\003\013\000\002" +
    "\022\002\000\002\023\002\000\002\024\002\000\002\003" +
    "\020\000\002\003\007\000\002\003\006\000\002\014\003" +
    "\000\002\014\003\000\002\007\002\000\002\006\002\000" +
    "\002\011\002\000\002\010\004\000\002\010\002\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\003\000\002\004\002\000\002\012\004\000\002\025" +
    "\002\000\002\012\007\000\002\012\006\000\002\013\003" +
    "\000\002\013\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\005\000\002\005\006\000\002" +
    "\005\005\000\002\026\002\000\002\005\006\000\002\027" +
    "\002\000\002\005\006\000\002\005\005\000\002\005\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\046\004\013\006\017\013\uffda\014\004\015" +
    "\uffda\017\uffda\020\uffda\032\010\034\011\036\006\037\014" +
    "\040\025\041\020\043\024\045\005\046\023\047\022\050" +
    "\015\001\002\000\050\004\013\005\uffda\012\uffda\013\uffda" +
    "\014\004\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\032\010\043\024\045\005\046\023" +
    "\047\022\050\015\001\002\000\036\005\uffe4\010\143\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\045\144\001\002\000" +
    "\004\004\uffeb\001\002\000\014\013\031\014\032\015\034" +
    "\017\157\020\033\001\002\000\050\004\013\005\uffda\012" +
    "\uffda\013\uffda\014\004\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\032\010\043\024\045" +
    "\005\046\023\047\022\050\015\001\002\000\004\004\uffed" +
    "\001\002\000\032\005\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\001\002\000\032\004\013\005\uffda\013\uffda\014" +
    "\004\015\uffda\020\uffda\032\010\043\024\045\005\046\023" +
    "\047\022\050\015\001\002\000\046\004\uffeb\006\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\032\uffeb\034\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\001\002\000\032\005\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\001\002\000\052\002\uffff" +
    "\004\013\006\017\007\uffff\013\uffda\014\004\015\uffda\017" +
    "\uffda\020\uffda\032\010\034\011\036\006\037\014\040\025" +
    "\041\020\043\024\045\005\046\023\047\022\050\015\001" +
    "\002\000\046\004\uffec\006\uffec\013\uffec\014\uffec\015\uffec" +
    "\017\uffec\020\uffec\032\uffec\034\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\001\002\000\004\004\106\001\002\000\004\002\105\001" +
    "\002\000\032\005\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\001\002\000\032\005\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\001\002\000\032\005\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\001\002\000\004\004\uffed\001\002" +
    "\000\004\004\027\001\002\000\032\004\013\013\uffda\014" +
    "\004\015\uffda\017\uffda\020\uffda\032\010\043\024\045\005" +
    "\046\023\047\022\050\015\001\002\000\014\013\031\014" +
    "\032\015\034\017\035\020\033\001\002\000\050\004\013" +
    "\005\uffda\012\uffda\013\uffda\014\004\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\032\010" +
    "\043\024\045\005\046\023\047\022\050\015\001\002\000" +
    "\050\004\013\005\uffda\012\uffda\013\uffda\014\004\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\032\010\043\024\045\005\046\023\047\022\050\015" +
    "\001\002\000\050\004\013\005\uffda\012\uffda\013\uffda\014" +
    "\004\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\032\010\043\024\045\005\046\023\047" +
    "\022\050\015\001\002\000\050\004\013\005\uffda\012\uffda" +
    "\013\uffda\014\004\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\032\010\043\024\045\005" +
    "\046\023\047\022\050\015\001\002\000\042\004\ufff5\011" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\032\ufff5\043\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\001\002\000\042\004\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\032\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\001\002\000\042\004\043\011\040\013\uffda\014\004\015" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\032\010" +
    "\043\024\045\005\046\023\047\022\050\015\001\002\000" +
    "\042\004\043\011\040\013\uffda\014\004\015\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\032\010\043\024\045" +
    "\005\046\023\047\022\050\015\001\002\000\022\013\031" +
    "\014\032\015\034\020\033\021\060\022\061\023\056\024" +
    "\057\001\002\000\010\012\046\016\047\017\072\001\002" +
    "\000\044\004\043\005\uffda\011\040\013\uffda\014\004\015" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\032\010" +
    "\043\024\045\005\046\023\047\022\050\015\001\002\000" +
    "\024\005\055\013\031\014\032\015\034\020\033\021\060" +
    "\022\061\023\056\024\057\001\002\000\010\005\050\012" +
    "\046\016\047\001\002\000\042\004\uffcd\011\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\032\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\001\002\000\042\004\uffcb\011\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\032\uffcb" +
    "\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002\000" +
    "\012\005\uffc9\012\uffc9\016\uffc9\017\uffc9\001\002\000\042" +
    "\004\043\011\040\013\uffda\014\004\015\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\032\010\043\024\045\005" +
    "\046\023\047\022\050\015\001\002\000\012\005\uffca\012" +
    "\uffca\016\uffca\017\uffca\001\002\000\042\004\043\011\040" +
    "\013\uffda\014\004\015\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\032\010\043\024\045\005\046\023\047\022" +
    "\050\015\001\002\000\012\005\uffcc\012\uffcc\016\uffcc\017" +
    "\uffcc\001\002\000\032\005\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\001\002\000\042\004\013\005\uffda\010\070" +
    "\012\uffda\013\uffda\014\004\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\032\010\043\024\045\005\046\023\047\022\050\015" +
    "\001\002\000\042\004\013\005\uffda\010\065\012\uffda\013" +
    "\uffda\014\004\015\uffda\016\uffda\017\uffda\020\uffda\032\010" +
    "\043\024\045\005\046\023\047\022\050\015\001\002\000" +
    "\040\004\013\005\uffda\012\uffda\013\uffda\014\004\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\032\010\043\024\045\005\046" +
    "\023\047\022\050\015\001\002\000\040\004\013\005\uffda" +
    "\012\uffda\013\uffda\014\004\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\032\010\043\024\045\005\046\023\047\022\050\015" +
    "\001\002\000\022\005\uffd2\012\uffd2\013\031\014\032\015" +
    "\034\016\uffd2\017\uffd2\020\033\001\002\000\022\005\uffd3" +
    "\012\uffd3\013\031\014\032\015\034\016\uffd3\017\uffd3\020" +
    "\033\001\002\000\022\005\uffce\012\uffce\013\031\014\032" +
    "\015\034\016\uffce\017\uffce\020\033\001\002\000\040\004" +
    "\013\005\uffda\012\uffda\013\uffda\014\004\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\032\010\043\024\045\005\046\023\047" +
    "\022\050\015\001\002\000\022\005\uffcf\012\uffcf\013\031" +
    "\014\032\015\034\016\uffcf\017\uffcf\020\033\001\002\000" +
    "\022\005\uffd0\012\uffd0\013\031\014\032\015\034\016\uffd0" +
    "\017\uffd0\020\033\001\002\000\040\004\013\005\uffda\012" +
    "\uffda\013\uffda\014\004\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\032\010\043\024\045\005\046\023\047\022\050\015\001" +
    "\002\000\022\005\uffd1\012\uffd1\013\031\014\032\015\034" +
    "\016\uffd1\017\uffd1\020\033\001\002\000\032\004\ufff4\005" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\032\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002\000\032\004" +
    "\013\005\uffda\013\uffda\014\004\015\uffda\020\uffda\032\010" +
    "\043\024\045\005\046\023\047\022\050\015\001\002\000" +
    "\014\005\075\013\031\014\032\015\034\020\033\001\002" +
    "\000\046\004\ufff3\006\ufff3\013\ufff3\014\ufff3\015\ufff3\017" +
    "\ufff3\020\ufff3\032\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\001" +
    "\002\000\046\004\013\006\017\013\uffda\014\004\015\uffda" +
    "\017\uffda\020\uffda\032\010\034\011\036\006\037\014\040" +
    "\025\041\020\043\024\045\005\046\023\047\022\050\015" +
    "\001\002\000\054\002\ufff2\004\ufff2\006\ufff2\007\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\032\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\001\002\000\012\005\uffc8" +
    "\012\046\016\047\017\uffc8\001\002\000\032\005\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\001\002\000\032\005" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\001\002\000" +
    "\032\005\uffe7\012\uffe7\013\uffe7\014\uffe7\015\034\016\uffe7" +
    "\017\uffe7\020\033\021\uffe7\022\uffe7\023\uffe7\024\uffe7\001" +
    "\002\000\032\005\uffe8\012\uffe8\013\uffe8\014\uffe8\015\034" +
    "\016\uffe8\017\uffe8\020\033\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\001\002\000\004\002\000\001\002\000\032\004\013" +
    "\005\uffda\013\uffda\014\004\015\uffda\020\uffda\032\010\043" +
    "\024\045\005\046\023\047\022\050\015\001\002\000\014" +
    "\005\110\013\031\014\032\015\034\020\033\001\002\000" +
    "\004\017\111\001\002\000\054\002\ufff1\004\ufff1\006\ufff1" +
    "\007\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\043\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\001\002\000" +
    "\046\004\013\006\017\013\uffda\014\004\015\uffda\017\uffda" +
    "\020\uffda\032\010\034\011\036\006\037\014\040\025\041" +
    "\020\043\024\045\005\046\023\047\022\050\015\001\002" +
    "\000\004\007\114\001\002\000\054\002\ufff0\004\ufff0\006" +
    "\ufff0\007\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\032\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\001\002" +
    "\000\006\002\001\007\001\001\002\000\046\004\ufff7\006" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\032\ufff7" +
    "\034\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\001\002\000\046\004\013" +
    "\006\017\013\uffda\014\004\015\uffda\017\uffda\020\uffda\032" +
    "\010\034\011\036\006\037\014\040\025\041\020\043\024" +
    "\045\005\046\023\047\022\050\015\001\002\000\004\036" +
    "\121\001\002\000\004\004\122\001\002\000\042\004\043" +
    "\011\040\013\uffda\014\004\015\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\032\010\043\024\045\005\046\023" +
    "\047\022\050\015\001\002\000\010\005\124\012\046\016" +
    "\047\001\002\000\004\017\125\001\002\000\054\002\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\013\ufff6\014\ufff6\015\ufff6\017" +
    "\ufff6\020\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\001\002\000\014\005\055\013\031\014\032\015\034" +
    "\020\033\001\002\000\004\004\130\001\002\000\042\004" +
    "\043\011\040\013\uffda\014\004\015\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\032\010\043\024\045\131\046" +
    "\023\047\022\050\015\001\002\000\030\005\uffee\010\143" +
    "\013\uffe4\014\uffe4\015\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\045\144\001\002\000\004\005\ufffd\001\002" +
    "\000\010\005\uffef\012\046\016\047\001\002\000\004\005" +
    "\135\001\002\000\046\004\013\006\017\013\uffda\014\004" +
    "\015\uffda\017\uffda\020\uffda\032\010\034\011\036\006\037" +
    "\014\040\025\041\020\043\024\045\005\046\023\047\022" +
    "\050\015\001\002\000\054\002\ufffc\004\ufffc\006\ufffc\007" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\032\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\001\002\000\054" +
    "\002\uffe9\004\uffe9\006\uffe9\007\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\032\uffe9\034\uffe9\035\140\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\043\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\001\002\000\046\004\013\006\017\013\uffda" +
    "\014\004\015\uffda\017\uffda\020\uffda\032\010\034\011\036" +
    "\006\037\014\040\025\041\020\043\024\045\005\046\023" +
    "\047\022\050\015\001\002\000\054\002\ufffb\004\ufffb\006" +
    "\ufffb\007\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb" +
    "\032\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002" +
    "\000\054\002\uffea\004\uffea\006\uffea\007\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\032\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\001\002\000\050\004\013\005\uffda" +
    "\012\uffda\013\uffda\014\004\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\032\010\043\024" +
    "\045\005\046\023\047\022\050\015\001\002\000\036\005" +
    "\uffd9\010\146\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\145\001\002\000\004\045\uffd8\001\002\000\050\004\013" +
    "\005\uffda\012\uffda\013\uffda\014\004\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\032\010" +
    "\043\024\045\005\046\023\047\022\050\015\001\002\000" +
    "\032\005\uffd6\012\uffd6\013\031\014\032\015\034\016\uffd6" +
    "\017\uffd6\020\033\021\uffd6\022\uffd6\023\uffd6\024\uffd6\001" +
    "\002\000\004\045\151\001\002\000\034\005\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\153\001\002\000\032" +
    "\005\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\001\002" +
    "\000\004\045\151\001\002\000\032\005\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\001\002\000\032\005\uffde\012" +
    "\uffde\013\031\014\032\015\034\016\uffde\017\uffde\020\033" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\001\002\000\032\005" +
    "\uffdf\012\uffdf\013\031\014\032\015\034\016\uffdf\017\uffdf" +
    "\020\033\021\uffdf\022\uffdf\023\uffdf\024\uffdf\001\002\000" +
    "\054\002\ufffe\004\ufffe\006\ufffe\007\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\017\ufffe\020\ufffe\032\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\001\002\000\004\004\ufffa\001\002\000" +
    "\004\004\162\001\002\000\042\004\043\011\040\013\uffda" +
    "\014\004\015\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\032\010\043\024\045\005\046\023\047\022\050\015" +
    "\001\002\000\010\005\ufff9\012\046\016\047\001\002\000" +
    "\004\005\165\001\002\000\046\004\013\006\017\013\uffda" +
    "\014\004\015\uffda\017\uffda\020\uffda\032\010\034\011\036" +
    "\006\037\014\040\025\041\020\043\024\045\005\046\023" +
    "\047\022\050\015\001\002\000\054\002\ufff8\004\ufff8\006" +
    "\ufff8\007\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\001\002" +
    "\000\032\005\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\012\002\020\003\015\004\006\012\011\001" +
    "\001\000\006\004\166\012\011\001\001\000\002\001\001" +
    "\000\004\011\157\001\001\000\002\001\001\000\006\004" +
    "\155\012\011\001\001\000\004\007\126\001\001\000\002" +
    "\001\001\000\006\004\125\012\011\001\001\000\004\011" +
    "\115\001\001\000\002\001\001\000\012\002\114\003\015" +
    "\004\006\012\011\001\001\000\004\006\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\025\001\001\000" +
    "\002\001\001\000\006\004\027\012\011\001\001\000\002" +
    "\001\001\000\006\004\103\012\011\001\001\000\006\004" +
    "\102\012\011\001\001\000\006\004\101\012\011\001\001" +
    "\000\006\004\100\012\011\001\001\000\004\022\035\001" +
    "\001\000\004\007\036\001\001\000\010\004\040\005\041" +
    "\012\011\001\001\000\010\004\040\005\077\012\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\043" +
    "\005\044\012\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\052\001\001\000\004\027\050\001\001" +
    "\000\002\001\001\000\010\004\040\005\051\012\011\001" +
    "\001\000\002\001\001\000\010\004\040\005\053\012\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\066\012\011\001\001\000\006\004\063\012\011\001\001" +
    "\000\006\004\062\012\011\001\001\000\006\004\061\012" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\065\012\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\070\012\011\001\001" +
    "\000\002\001\001\000\004\023\072\001\001\000\006\004" +
    "\073\012\011\001\001\000\002\001\001\000\004\024\075" +
    "\001\001\000\010\003\076\004\006\012\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\106\012\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\112\003" +
    "\015\004\006\012\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\116\001\001\000" +
    "\010\003\117\004\006\012\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\040\005\122\012\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\040\005" +
    "\132\012\011\014\131\001\001\000\002\001\001\000\004" +
    "\015\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\135\004\006\012\011\001\001\000\004\016\136" +
    "\001\001\000\004\010\140\001\001\000\010\003\141\004" +
    "\006\012\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\154\012\011\001\001\000\002\001\001\000" +
    "\004\025\147\001\001\000\006\004\146\012\011\001\001" +
    "\000\002\001\001\000\004\013\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\160\001\001\000\002\001\001\000\010" +
    "\004\040\005\162\012\011\001\001\000\004\020\163\001" +
    "\001\000\002\001\001\000\010\003\165\004\006\012\011" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String tipoTemp = "null";
    int numEt = 0;
    int numVar = 0;
    TablaSimbolos t = new TablaSimbolos();
    String newEtiq(){
        String v = new String("L"+Integer.toString(numEt));
        numEt++;
        return v;
    }
    String newTemp(){
        String v = new String("t"+Integer.toString(numVar));
        numVar++;
        return v;
    }
    public class ParEt {
        public String sv, sf;
        public ParEt(String v, String f){
            sv = v;
            sf = f;
        }
    }

    public void declararBasico(String tipo, String nombre){
        switch(tipo) {
            case "int":
                if(t.contiene(nombre, t.bActual)){}
                Objeto o = new Instancia(nombre, TInt.getInstancia(), t.bActual, true);
                t.addObj(o);
                break;
            case "char":
                if(t.contiene(nombre, t.bActual)){}
                Objeto o1 = new Instancia(nombre, TChar.getInstancia(), t.bActual, true);
                t.addObj(o1);
                break;
            case "boolean":
                if(t.contiene(nombre, t.bActual)){}
                Objeto o2 = new Instancia(nombre, TBoolean.getInstancia(), t.bActual, true);
                t.addObj(o2);
                break;
        }
    }

    public void declararComplejo(String tipo, String nombre, Objeto ob){
        switch(tipo){
            case "int":
                break;
            case "char":
                if(t.contiene(nombre, t.bActual)){}
                Objeto o = new Instancia(nombre, TChar.getInstancia(), t.bActual, true);
                Vector<Objeto> pc = new Vector<>();
                pc.add(ob);
                o.metodos("asigna", pc);
                t.addObj(o);
                break;
            case "boolean":
                System.out.println("AQUI");
                if(t.contiene(nombre, t.bActual)){}
                Objeto o1 = new Instancia(nombre, TBoolean.getInstancia(), t.bActual, true);
                Vector<Objeto> pb = new Vector<>();
                pb.add(ob);
                o1.metodos("asigna", pb);
                t.addObj(o1);
    
                break;
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista_de_sent ::= sentencia lista_de_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_de_sent ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(c.sv + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
PLXC.out.println("goto " + f + ";");
                                                  PLXC.out.println(c.sf + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= IF etqF AP ifComplejo NT$0 CP sentencia NT$1 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		PLXC.out.println(f + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(w+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(c.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= WHILE etqW NT$2 AP condicion NT$3 CP sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		PLXC.out.println("goto "+ w+";");
                                                  PLXC.out.println(c.sf + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
PLXC.out.println(w+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= DO etqW NT$4 sentencia WHILE AP condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println(c.sv+":");
                                                  PLXC.out.println("goto "+w+";");
                                                  PLXC.out.println(c.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
PLXC.out.println(f1+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(f2+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
PLXC.out.println("goto "+f1+";");
                                                  PLXC.out.println(c.sv+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= FOR etqF AP expresion PYC NT$5 etqF condicion PYC NT$6 expresion CP NT$7 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		PLXC.out.println("goto "+f2+";");
                                                  PLXC.out.println(c.sf+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		e1.metodos("imprimir", new Vector<>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= AC iBloque lista_de_sent CC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		t.borrarBloque(t.bActual);
                                                  t.bActual=b.intValue();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ifComplejo ::= condicion 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifComplejo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ifComplejo ::= IDENT 
            {
              ParEt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifComplejo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etqF ::= 
            {
              Object RESULT =null;
		RESULT = newEtiq();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etqF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // iBloque ::= 
            {
              Integer RESULT =null;
		RESULT = Integer.valueOf(TablaSimbolos.newBloque());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iBloque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etqW ::= 
            {
              Object RESULT =null;
		RESULT = newEtiq();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etqW",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // else_if ::= ELSE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // else_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion MAS expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Vector<Objeto> v = new Vector<>();
                                                  v.add(e2);
                                                  RESULT = e1.metodos("suma",v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion MENOS expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Vector<Objeto> v = new Vector<>();
                                                  v.add(e2);
                                                  RESULT = e1.metodos("menos",v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion POR expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Vector<Objeto> v = new Vector<>();
                                                  v.add(e2);
                                                  RESULT = e1.metodos("por",v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion DIV expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Vector<Objeto> v = new Vector<>();
                                                  v.add(e2);
                                                  RESULT = e1.metodos("div",v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= IDENT 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!t.contiene(i)){}
                                                  Objeto o = t.objeto(i);
                                                  if(!(o instanceof Instancia)) {}
                                                  RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= BOOLEAN 
            {
              Objeto RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Instancia(b, TBoolean.getInstancia(), TablaSimbolos.bActual, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= ENTERO 
            {
              Objeto RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Instancia(n.toString(), TInt.getInstancia(), TablaSimbolos.bActual, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= UNICODE 
            {
              Objeto RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Instancia(u, TChar.getInstancia(), TablaSimbolos.bActual, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= ASCII 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Instancia(String.valueOf((int)c.charAt(0)), TChar.getInstancia(), TablaSimbolos.bActual, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= CASTCHAR expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Vector<Objeto> v = new Vector<>();
                                                  v.add(e);
                                                  RESULT = e.metodos("castChar",v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= IDENT EQLN expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!t.contiene(i)){}
                                                 
                                                  Objeto o = t.objeto(i);
                                                  if(!(o instanceof Instancia)) {}
                                                  Vector<Objeto> v = new Vector<>();
                                                  v.add(e);
                                                  o.metodos("asigna", v);
                                                  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= AP expresion CP 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= MENOS expresion 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Vector<Objeto> v = new Vector<>();
                                                  v.add(e);
                                                  Objeto aux = new Instancia("0", TInt.getInstancia(), TablaSimbolos.bActual, false);
                                                  RESULT = e.metodos("resta",v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= declararVar 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declararVar ::= IDENT IDENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		declararBasico(tipo,n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declararVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tipoTemp = tipo;
                                                  declararBasico(tipo,n);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declararVar ::= IDENT IDENT COMA NT$8 masVar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declararVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declararVar ::= IDENT IDENT EQLN expresion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("AQUI");declararComplejo(tipo, n, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declararVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // masVar ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		declararBasico(tipoTemp,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masVar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // masVar ::= IDENT COMA masVar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		declararBasico(tipoTemp, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masVar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion IGUAL expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLXC.out.println("if (" + e1.getNombre() + " == " + e2.getNombre()  + ") " + "goto " +  v1 +";");
                                                PLXC.out.println("goto " + v2 + ";");
                                                RESULT = new ParEt(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= expresion DIFERENTE expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLXC.out.println("if (" + e1.getNombre()  + " == " + e2.getNombre()  + ") " + "goto " +  v2 +";");
                                                PLXC.out.println("goto " + v1 + ";");
                                                RESULT = new ParEt(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= expresion MENOR EQLN expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLXC.out.println("if (" + e2.getNombre()  + " < " + e1.getNombre()  + ") " + "goto " +  v2 +";");
                                                PLXC.out.println("goto " + v1 + ";");
                                                RESULT = new ParEt(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= expresion MENOR expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLXC.out.println("if (" + e1.getNombre()  + " < " + e2.getNombre()  + ") " + "goto " +  v1 +";");
                                                PLXC.out.println("goto " + v2 + ";");
                                                RESULT = new ParEt(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= expresion MAYOR EQLN expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLXC.out.println("if (" + e1.getNombre()  + " < " + e2.getNombre()  + ") " + "goto " +  v2 +";");
                                                PLXC.out.println("goto " + v1 + ";");
                                                RESULT = new ParEt(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= expresion MAYOR expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLXC.out.println("if (" + e2.getNombre()  + " < " + e1.getNombre()  + ") " + "goto " +  v1 +";");
                                                PLXC.out.println("goto " + v2 + ";");
                                                RESULT = new ParEt(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$9 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(c1.sv + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= condicion AND NT$9 condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(c1.sf + ":");
                                                  PLXC.out.println("goto "+c2.sf+";");
                                                  RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$10 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
PLXC.out.println(c1.sf + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= condicion O NT$10 condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		PLXC.out.println(c1.sv + ":");
                                                  PLXC.out.println("goto "+c2.sv+";");
                                                  RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= AP condicion CP 
            {
              ParEt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion ::= EX condicion 
            {
              ParEt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParEt(e.sf,e.sv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
