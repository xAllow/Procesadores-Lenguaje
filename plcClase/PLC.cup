import java_cup.runtime.*;

action code{:
   
    int numEt = 0;
    int numVar = 0;
    
    String newEtiq(){
        String v = new String("L"+Integer.toString(numEt));
        numEt++;
        return v;
    }

    String newTemp(){
        String v = new String("t"+Integer.toString(numVar));
        numVar++;
        return v;
    }
    public class ParEt {
        public String sv, sf;
        public ParEt(String v, String f){
            sv = v;
            sf = f;
        }
    }
:};

terminal AP, CP, AC, CC,EQLN, EX,AND, MAS, MENOS, POR, O , PYC, DIV, IGUAL, DIFERENTE,MENOR,MAYOR;
terminal String IF, ELSE, WHILE, DO,  FOR, PRINT;
terminal Integer ENTERO;
terminal MENOSUNARIO;
terminal String IDENT;

non terminal lista_de_sent;
non terminal sentencia;
non terminal String expresion;
non terminal ParEt condicion;
non terminal etqF;
non terminal else_if;
non terminal etqW;


precedence left IF, ELSE, DO, WHILE, FOR, PRINT;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left MENOR,MAYOR,DIFERENTE;
precedence left O, AND;

precedence left IDENT, ENTERO;
precedence left MENOSUNARIO;

lista_de_sent ::= sentencia lista_de_sent
                | sentencia
                ;

sentencia ::= expresion PYC
        | IF etqF:f AP condicion:c              {:PLC.out.println(c.sv + ":");:}    

        CP sentencia                            {:PLC.out.println("goto " + f + ";");
                                                  PLC.out.println(c.sf + ":");:}  
        else_if                                 {:PLC.out.println(f + ":");:}  

        | WHILE etqW:w                          {:PLC.out.println(w+":");:}
        AP condicion:c                          {:PLC.out.println(c.sv+":");:}
        CP sentencia                            {:PLC.out.println("goto "+ w+";");
                                                  PLC.out.println(c.sf + ":");:} 
        
        | DO etqW:w                             {:PLC.out.println(w+":");:}
        sentencia                              
        WHILE AP condicion:c CP PYC             {:PLC.out.println(c.sv+":");
                                                  PLC.out.println("goto "+w+";");
                                                  PLC.out.println(c.sf+":");:}
                    
        | FOR etqF:f1
        AP expresion PYC                        {:PLC.out.println(f1+":");:}
        etqF:f2 condicion:c PYC                  {:PLC.out.println(f2+":");:}
        expresion CP                                  {:PLC.out.println("goto "+f1+";");
                                                  PLC.out.println(c.sv+":");:}
        sentencia                               {:PLC.out.println("goto "+f2+";");
                                                  PLC.out.println(c.sf+":");:}

        | PRINT AP expresion:e1 CP PYC          {:PLC.out.println("print " + e1 + ";");:}

        | AC  lista_de_sent CC                
        ;

etqF    ::= {:RESULT = newEtiq();:}
        ;

etqW    ::= {:RESULT = newEtiq();:};

else_if ::= ELSE sentencia
            | 
            ;

expresion ::= expresion:e1 MAS expresion:e2     {:String vdest = newTemp();
                                                PLC.out.println(vdest + " = " + e1 + " + " + e2 + ";");
                                                RESULT = vdest;:}
        | expresion:e1 MENOS expresion:e2       {:String vdest = newTemp();
                                                PLC.out.println(vdest + " = " + e1 + " - " + e2 + ";");
                                                RESULT = vdest;:}

        | expresion:e1 POR expresion:e2         {:String vdest = newTemp();
                                                PLC.out.println(vdest + " = " + e1 + " * " + e2 + ";");
                                                RESULT = vdest;:}

        | expresion:e1 DIV expresion:e2         {:String vdest = newTemp();
                                                PLC.out.println(vdest + " = " + e1 + " / " + e2 + ";");
                                                RESULT = vdest;:}

        | IDENT:i                               {:RESULT = i;:}

        | ENTERO:n                              {:RESULT = n.toString();:}
       
        | IDENT:i EQLN expresion:e              {:PLC.out.println(i + " = " + e + ";");
                                                RESULT = i;:}
        | AP expresion:e CP                     {:RESULT = e;:}
        | MENOS expresion:e                     {:String vdest = newTemp();
                                                PLC.out.println(vdest + "= 0 - " + e+";");
                                                RESULT = vdest;:} %prec MENOSUNARIO
        ;
    
condicion ::= expresion:e1 IGUAL expresion:e2   {:String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLC.out.println("if (" + e1 + " == " + e2 + ") " + "goto " +  v1 +";");
                                                PLC.out.println("goto " + v2 + ";");
                                                RESULT = new ParEt(v1,v2);:}

        | expresion:e1 DIFERENTE expresion:e2     {:String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLC.out.println("if (" + e1 + " == " + e2 + ") " + "goto " +  v2 +";");
                                                PLC.out.println("goto " + v1 + ";");
                                                RESULT = new ParEt(v1,v2);:} 

        | expresion:e1 MENOR EQLN expresion:e2  {:String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLC.out.println("if (" + e2 + " < " + e1 + ") " + "goto " +  v2 +";");
                                                PLC.out.println("goto " + v1 + ";");
                                                RESULT = new ParEt(v1,v2);:}   


        | expresion:e1 MENOR  expresion:e2  {:  String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLC.out.println("if (" + e1 + " < " + e2 + ") " + "goto " +  v1 +";");
                                                PLC.out.println("goto " + v2 + ";");
                                                RESULT = new ParEt(v1,v2);:}     

        | expresion:e1 MAYOR EQLN expresion:e2  {:String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLC.out.println("if (" + e1 + " < " + e2 + ") " + "goto " +  v2 +";");
                                                PLC.out.println("goto " + v1 + ";");
                                                RESULT = new ParEt(v1,v2);:}
        | expresion:e1 MAYOR  expresion:e2  {:  String v1 = newEtiq();
                                                String v2 = newEtiq();
                                                PLC.out.println("if (" + e2 + " < " + e1 + ") " + "goto " +  v1 +";");
                                                PLC.out.println("goto " + v2 + ";");
                                                RESULT = new ParEt(v1,v2);:}    
            
        | condicion:c1 AND                      {:PLC.out.println(c1.sv + ":");:} 
        condicion:c2                            {:PLC.out.println(c1.sf + ":");
                                                  PLC.out.println("goto "+c2.sf+";");
                                                  RESULT = c2;:}
                                                  
        | condicion:c1 O                       {:PLC.out.println(c1.sf + ":");:} 
        condicion:c2                            {:PLC.out.println(c1.sv + ":");
                                                  PLC.out.println("goto "+c2.sv+";");
                                                  RESULT = c2;:}
        | AP condicion CP                                     

        |EX condicion:e                         {:RESULT = new ParEt(e.sf,e.sv);:}                                         
        ;