import java_cup.runtime.*;
import java.util.*;
action code {:
    double[][] matriz; 
    ArrayList<ArrayList<Double>> filas = new ArrayList();
    ArrayList<Double> fila = new ArrayList();
    boolean ok = false;

    public boolean comprobarMatriz(ArrayList<ArrayList<Double>> matriz){
        ok = true;
        if(matriz == null | matriz.isEmpty()){
            throw new IllegalArgumentException("La matriz no puede estar vac√≠a.");
        }
        int longitudPrimeraFila = matriz.get(0).size();

        for (int i = 1; i < matriz.size(); i++) {

            if (matriz.get(i).size() != longitudPrimeraFila) {
                // Las filas no tienen la misma longitud
                error(1);
                ok = false;
            }
        }
        return ok;
    }
    public boolean esCuadrada(double[][] matriz){
        
        return Matrices.filas(matriz)==Matrices.columnas(matriz);
    }

    public boolean comprobarMulti(double[][] matriz1,double[][]  matriz2){
        return (Matrices.columnas(matriz1)==Matrices.filas(matriz2));
    }

    public boolean comprobarSuma(double[][] matriz1,double[][]  matriz2) {
        return Matrices.filas(matriz1) == Matrices.filas(matriz2) && Matrices.columnas(matriz1) == Matrices.columnas(matriz2);
    }
    public void error(int id) {
        switch (id) {
            case 1 :
                System.err.print(Matrices.ERROR_FILAS);
                System.exit(1);
            
            case 2 :
                System.err.print(Matrices.ERROR_INVERSA);
                System.exit(1);

            case 3 :
                System.err.print(Matrices.ERROR_ADJUNTA);
                System.exit(1);
                
            case 4 :
                System.err.print(Matrices.ERROR_PROD);
                System.exit(1);
                
            case 5 :
                System.err.print(Matrices.ERROR_SUMA);
                System.exit(1);
            
            case 6 :
                System.err.print(TablaSimbolos.ERROR_NOEXISTE);
                System.exit(1);
            
            default:
                System.err.print("Error desconocido");
                System.exit(1);
        }
        
        ok = true;
    }
:};

terminal AP, CP, AC, CC, COMA, PYC;
terminal ALL, CLL, ASIG, MAS, MENOS, POR, DIV;
terminal String PRINT, INVERSA, TRANSPUESTA, ADJUNTA, IDENT;
terminal Double NUMERO;

non terminal linea, lineas, asignaciones;
non terminal ArrayList<ArrayList<Double>> filas, operacion, matriz,funciones;
non terminal ArrayList<Double> fila;


precedence left PRINT;
precedence left TRANSPUESTA,INVERSA;
precedence left COMA;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left AP, CP;
precedence left AC, CC;

lineas ::= lineas linea
        | linea ;
    
linea ::= funciones PYC
        | asignaciones PYC;

asignaciones ::= IDENT:a ASIG funciones:m {:TablaSimbolos.insertar(a, Matrices.toArray(m));:};

funciones ::= PRINT AP funciones:m CP           {:Matrices.print(m);:}
            | TRANSPUESTA AP funciones:m CP     {:RESULT = Matrices.toArrayList(Matrices.transpuesta(Matrices.toArray(m)));:}
            | INVERSA AP funciones:m CP         {:if(esCuadrada(Matrices.toArray(m)))
                                                    RESULT = Matrices.toArrayList(Matrices.inversa(Matrices.toArray(m)));
                                                  else 
                                                    error(2);
                                                :}
            | ADJUNTA AP funciones:m CP         {:if(esCuadrada(Matrices.toArray(m)))
                                                    RESULT = Matrices.toArrayList(Matrices.adjunta(Matrices.toArray(m)));
                                                  else 
                                                    error(3);
                                                :}
            | funciones:m1 MAS funciones:m2     {:if(comprobarSuma(Matrices.toArray(m1), Matrices.toArray(m2)))
                                                    RESULT = Matrices.toArrayList(Matrices.suma(Matrices.toArray(m1),Matrices.toArray(m2)));
                                                  else 
                                                    error(5);
                                                :}
            | funciones:m1 POR funciones:m2     {:if(comprobarMulti(Matrices.toArray(m1), Matrices.toArray(m2)))
                                                    RESULT = Matrices.toArrayList(Matrices.producto(Matrices.toArray(m1),Matrices.toArray(m2)));
                                                  else 
                                                    error(4);
                                                :}
            | IDENT:a                           {:RESULT = Matrices.toArrayList(TablaSimbolos.buscar(a));:}
            | AP funciones:m CP                 {:RESULT = m;:}
            | matriz: m                         {:RESULT=m;:};

matriz ::= AC filas CC              {:if(comprobarMatriz(filas)){
                                                    RESULT = (ArrayList<ArrayList<Double>>)filas.clone(); 
                                                    filas.clear();
                                        }
                                    :}
           | ALL filas CLL          {:if(comprobarMatriz(filas)){
                                                    RESULT = (ArrayList<ArrayList<Double>>)filas.clone(); 
                                                    filas.clear();
                                        }
                                    :};

filas ::= filas PYC fila            {:filas.add((ArrayList<Double>)fila.clone()); fila.clear();:}
        | filas COMA ALL filas CLL   {:filas.add((ArrayList<Double>)fila.clone()); fila.clear();:}
        | ALL fila CLL              {:filas.add((ArrayList<Double>)fila.clone()); fila.clear();:}
        | fila                      {:filas.add((ArrayList<Double>)fila.clone()); fila.clear();:};

fila ::= fila COMA NUMERO:n         {:fila.add(n);:}
    | NUMERO:n                      {:fila.add(n);:};
